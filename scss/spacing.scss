/**
 * Spacing
 * https://stackoverflow.design/product/base/spacing/
 */
@import "helpers";

// Margin and Padding
$classes: ("m":"margin", "p":"padding");

@mixin spacing-values($prefix,$axis,$postfix,$prop,$value) {
  // axes
  .#{$prefix}#{$axis}#{format-postfix($postfix)} {
    @each $ap in map-get($axes, $axis) {
      //#{$prop}#{$ap}: #{format-value($value)};

      $var: '';
      @if $ap == '-top' or $ap == '-bottom' {
        $var: '-y';
      }
      @if $ap == '-left' or $ap == '-right' {
        $var: '-x';
      }


      #{$prop}#{$ap}: var(--#{$prop}#{$var}-#{replace-prop($value)});
    }
  }

  // top right bottom left
  @each $prefix-c, $prop-c in $coordinates {
    .#{$prefix}#{$prefix-c}#{format-postfix($postfix)} {
      $var: '';
      @debug $prop-c;
      @if $prop-c == 'top' or $prop-c == 'bottom' {
        $var: 'y';
      }
      @if $prop-c == 'left' or $prop-c == 'right' {
        $var: 'x';
      }

      #{$prop}-#{$prop-c}: var(--#{$prop}-#{$var}-#{replace-prop($value)});
    }
  }
}

@mixin spacing($prefix, $prop, $dataset) {
  @each $axis, $data in $dataset {
    @each $breakpoint, $values in $data {

      @if is-breakpoint($breakpoint) {
        @include media-screen($breakpoint) {

          @for $i from 1 through length($values) {
            $value: nth($values, $i);
            $postfix: get-previous-breakpoint-value($i, $value, $breakpoint, $data);

            @include responsive($breakpoint, $value, $postfix) {
            }

          }

        }
      } @else {
        :root {
          @for $i from 1 through length($values) {
            $value: nth($values, $i);
            $postfix: get-previous-breakpoint-value($i, $value, $breakpoint, $data);

            @debug ($axis, $prefix, $prop, $value, $postfix);
            --#{$prop}-#{$axis}-#{replace-prop($postfix)}: #{format-value($value)};
          }
        }

        @for $i from 1 through length($values) {
          $value: nth($values, $i);
          $postfix: get-previous-breakpoint-value($i, $value, $breakpoint, $data);
          @include spacing-values($prefix, $axis, $postfix, $prop, $value);
        }
      }

    }
  }
}

@each $prefix, $prop in $classes {
  @if ($prefix == "m") {
    /* Margin auto */
    .#{$prefix}-auto {
      #{$prop}: auto;
    }
    @each $prefix-mod, $prop-mod in $coordinates {
      .#{$prefix}#{$prefix-mod}-auto {
        #{$prop}-#{$prop-mod}: auto;
      }
    }
  }

  // axes
  @include spacing($prefix, $prop, $spacing_values);
}